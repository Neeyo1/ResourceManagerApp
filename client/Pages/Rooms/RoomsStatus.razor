@page "/rooms/status"
@inject ApiClient apiClient
@inject IToastService ToastService
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using client.Components
@using client.Helpers
@using shared.DTOs.Room
@using static client.Components.Pagination

@attribute [Authorize]

<PageTitle>Rooms status</PageTitle>

<h1>Rooms status</h1>

<EditForm OnValidSubmit="Submit" Model="Model">
    <div class="container">
        <div class="row mb-3">
            <label>Reserved from</label>
            <InputText class="form-control" @bind-Value="Model.ReservedFromString" />
            <ValidationMessage For="() => Model.ReservedFromString" />
        </div>
        <div class="row mb-3">
            <label>Reserved to</label>
            <InputText class="form-control" @bind-Value="Model.ReservedToString" />
            <ValidationMessage For="() => Model.ReservedToString" />
        </div>
    </div>
    <button class="btn btn-success" type="submit">Search</button>
</EditForm>

@if (roomsStatus == null)
{
    <p><em>No results</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Capacity</th>
                <th>Room type</th>
                <th>Room status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var roomStatus in roomsStatus)
            {
                <tr>
                    <td>@roomStatus.Id</td>
                    <td>@roomStatus.Name</td>
                    <td>@roomStatus.Capacity</td>
                    <td>@roomStatus.RoomType</td>
                    <td>@roomStatus.RoomStatus</td>
                    <td>
                        @if (roomStatus.RoomStatus == "Avaiable")
                        {
                            <AuthorizeView>
                                <a class="btn btn-primary" href="/rooms/@roomStatus.Id/reserve">Make reservation</a>
                            </AuthorizeView>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination CurrentPage="currentPage" TotalPages="totalPages" OnPageChanged="PageChanged" />
}

@code {
    private RoomWithReservationsDto[]? roomsStatus;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;
    private RoomReservationCreateDto Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Model.ReservedFromString = DateTime.Now.ToString();
        Model.ReservedToString = DateTime.Now.AddHours(1).ToString();

        await Task.CompletedTask;
    }

    private async Task LoadRoomsStatusData()
    {
        var response = await apiClient.GetAsync($"rooms/status?pageNumber={currentPage}&pageSize={pageSize}&start={Model.ReservedFrom.ToString("o")}&end={Model.ReservedTo.ToString("o")}");
        if (response.IsSuccessStatusCode)
        {
            roomsStatus = await response.Content.ReadFromJsonAsync<RoomWithReservationsDto[]>();

            if (response.Headers.Contains("Pagination"))
            {
                var paginationHeader = response.Headers.GetValues("Pagination").FirstOrDefault();
                if (paginationHeader == null)
                {
                    return;
                }

                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                var paginationData = JsonSerializer.Deserialize<PaginationDto>(paginationHeader, options);
                if (paginationData == null)
                {
                    return;
                }

                totalPages = paginationData.TotalPages;
            }
        }
        else
        {
            ToastService.ShowError(response.StatusCode.ToString());
        }
    }

    private async Task PageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadRoomsStatusData();
    }

    private async Task Submit()
    {
        var isReservedFromValid = DateTime.TryParse(Model.ReservedFromString, out var reservedFromParsed);
        var isReservedToValid = DateTime.TryParse(Model.ReservedToString, out var reservedToParsed);
        if (!isReservedFromValid || !isReservedToValid)
        {
            ToastService.ShowError("Failed to parse dates");
            return;
        }

        Model.ReservedFrom = reservedFromParsed.ToUniversalTime();
        Model.ReservedTo = reservedToParsed.ToUniversalTime();

        await LoadRoomsStatusData();
    }

    private class RoomReservationCreateDto
    {
        [Required]
        public DateTime ReservedFrom { get; set; }

        [Required]
        public string? ReservedFromString { get; set; }

        [Required]
        public DateTime ReservedTo { get; set; }

        [Required]
        public string? ReservedToString { get; set; }

        [Required]
        public int RoomId { get; set; }
    }
}
