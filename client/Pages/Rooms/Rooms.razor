@page "/rooms"
@inject ApiClient apiClient
@inject IToastService ToastService
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using client.Components
@using client.DTOs
@using client.DTOs.Room
@using client.Helpers

@attribute [Authorize]

<PageTitle>Rooms</PageTitle>

<h1>Rooms</h1>

@if (rooms == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Policy="RequireAdminRole">
        <a class="btn btn-success" href="/rooms/create">Create</a>
    </AuthorizeView>
    <a class="btn btn-primary" href="/rooms/status">Check status</a>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Capacity</th>
                <th>RoomType</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in rooms)
            {
                <tr>
                    <td>@room.Id</td>
                    <td>@room.Name</td>
                    <td>@room.Capacity</td>
                    <td>@room.RoomType</td>
                    <td>
                        <a class="btn btn-primary" href="/rooms/@room.Id">Details</a>
                        <AuthorizeView>
                            <a class="btn btn-primary" href="/rooms/@room.Id/reserve">Make reservation</a>
                        </AuthorizeView>
                        <AuthorizeView Policy="RequireAdminRole">
                            <a class="btn btn-secondary" href="/rooms/@room.Id/update">Update</a>
                            <a class="btn btn-danger" href="/rooms/@room.Id/delete">Delete</a>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination
        CurrentPage="currentPage"
        TotalPages="totalPages"
        OnPageChanged="PageChanged"
    />
}

@code {
    private RoomDto[]? rooms;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoomsData(currentPage);
    }

    private async Task LoadRoomsData(int page)
    {
        var response = await apiClient.GetAsync($"rooms?pageNumber={currentPage}&pageSize={pageSize}");
        if (response.IsSuccessStatusCode)
        {
            rooms = await response.Content.ReadFromJsonAsync<RoomDto[]>();

            if (response.Headers.Contains("Pagination"))
            {
                var paginationHeader = response.Headers.GetValues("Pagination").FirstOrDefault();
                if (paginationHeader == null)
                {
                    return;
                }

                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                var paginationData = JsonSerializer.Deserialize<PaginationDto>(paginationHeader, options);
                if (paginationData == null)
                {
                    return;
                }

                totalPages = paginationData.TotalPages;
            }
        }
        else
        {
            ToastService.ShowError(response.StatusCode.ToString());
        }
    }

    private async Task PageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadRoomsData(currentPage);
    }
}
